[build-system]
requires = ["poetry-core>=2.0.1"]
build-backend = "poetry.core.masonry.api"

[project]
name = "fpgmaas_cookiecutter_poetry_test_2"
version = "0.5.0rc3"
description = "This is the seconds refined test for fpgmaas's cookiecutter"
authors = [
  { name = "Mohsen Hasan Nezhad", email = "mohsenhasannezhad@outlook.com" },
]
readme = "README.md"
dynamic = ["dependencies", "classifiers"]
license = { text = "MIT" }
requires-python = ">=3.9"
keywords = ["test2", "MohsenHNSJ"]

[project.urls]
repository = "https://github.com/MohsenHNSJ/fpgmaas-cookiecutter-poetry-test-2"
documentation = "https://MohsenHNSJ.github.io/fpgmaas-cookiecutter-poetry-test-2/"
issues = "https://github.com/MohsenHNSJ/fpgmaas-cookiecutter-poetry-test-2/issues"


[tool.poetry]
classifiers = [
  "Topic :: Software Development :: Build Tools",
  "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.poetry.dependencies]
python = ">=3.9,<4.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.4"
deptry = "^0.22.0"
mypy = "^1.14.1"
pre-commit = "^4.1.0"
tox = "^4.24.1"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.1"
mkdocs-material = "^9.5.50"
mkdocstrings = { extras = ["python"], version = "^0.27.0" }

[tool.mypy]
files = ["fpgmaas_cookiecutter_poetry_test_2"]
disallow_untyped_defs = "True"
disallow_any_unimported = "True"
no_implicit_optional = "True"
check_untyped_defs = "True"
warn_return_any = "True"
warn_unused_ignores = "True"
show_error_codes = "True"


[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
target-version = "py313"
line-length = 120
fix = true
select = [
  # flake8-builtins
  "A",
  # flake8-bugbear
  "B",
  # flake8-comprehensions
  "C4",
  # mccabe
  "C90",
  # flake8-date-time-zone
  "DTZ",
  # pycodestyle-errors
  "E",
  # flake8-executable
  "EXE",
  # pyflakes
  "F",
  # isort
  "I",
  # flake8-gettext
  "INT",
  # pygrep-hooks
  "PGH",
  # flake8-pie
  "PIE",
  # pylint-convention
  "PLC",
  # pylint-errors
  "PLE",
  # flake8-pytest-style
  "PT",
  # flake8-use-pathlib
  "PTH",
  # flake8-raise
  "RSE",
  # ruff-specific rules
  "RUF",
  # flake8-bandit
  "S",
  # flake8-simplify
  "SIM",
  # flake8-debugger
  "T10",
  # tryceratops
  "TRY",
  # pyupgrade
  "UP",
  # pycodestyle-warnings
  "W",
  # flake8-2020
  "YTT",
]
ignore = [
  # pycodestyle line-too-long
  "E501",
  # DoNotAssignLambda
  "E731",
]

[tool.ruff.format]
preview = true


[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]
